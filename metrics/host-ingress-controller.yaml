apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx-host
    app.kubernetes.io/instance: ingress-nginx-host
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller-host
  namespace: ingress-nginx
data:
  log-format-escape-json: "true"
  log-format-upstream: '{"time": "$time_iso8601", "remote_addr": "$proxy_protocol_addr", "x-forward-for": "$proxy_add_x_forwarded_for", "request_id": "$req_id", "remote_user": "$remote_user", "bytes_sent": $bytes_sent, "request_time": $request_time, "status":$status, "vhost": "$host", "request_proto": "$server_protocol", "path": "$uri", "request_query": "$args", "request_length": $request_length, "duration": $request_time,"method": "$request_method", "http_referrer": "$http_referer", "http_user_agent": "$http_user_agent", "namespace": "$namespace", "ingress_name": "$ingress_name", "service_name": "$service_name", "service_port": "$service_port" }'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: ingress-nginx-host
    app.kubernetes.io/instance: ingress-nginx-host
    app.kubernetes.io/component: controller
  name: ingress-nginx-controller-host
  namespace: ingress-nginx
spec:
  # ставим две реплики
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx-host
      app.kubernetes.io/instance: ingress-nginx-host
      app.kubernetes.io/component: controller
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx-host
        app.kubernetes.io/instance: ingress-nginx-host
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      # Вешаем поды непосредственно на сетевые интерфейсы node. 
      # --->>>> В том числе и на loopback!!!!! <<<< -----
      hostNetwork: true
      # nodeSelector:
        # обязательно пометить ноды, на которых может быть
        # установлен контроллер
        # ingress-nginx-node: enable
      # Использование affinity вместо nodeSelector
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: ingress-nginx-node
                operator: In
                values:
                - enable
      containers:
        - name: controller-host
          # image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.33.0
          image: us.gcr.io/k8s-artifacts-prod/ingress-nginx/controller:v0.34.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx-host
            - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller-host
            # Определяет namespace ingress которого будет обслуживать
            # контроллер. Если пустой, то отслеживаются все namespaces
            # - --watch-namespace=my-project-namespace
            - --http-port=80
            - --https-port=443
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            # порт для достпа к метрикам prometheus
            - name: metrics
              containerPort: 10254
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
